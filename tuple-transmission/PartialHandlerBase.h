/** @file
	@brief Header AUTO-GENERATED by variadicGenerate.lua on input PartialHandlerBase.gen.lua to avoid doing crazy preprocessor things

	DO NOT EDIT THIS FILE DIRECTLY - instead, edit the script that generates it.

	@date 2012

	@author
	Ryan Pavlik
	<rpavlik@iastate.edu> and <abiryan@ryand.net>
	http://academic.cleardefinition.com/
	Iowa State University Virtual Reality Applications Center
	Human-Computer Interaction Graduate Program
*/

//          Copyright Iowa State University 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#pragma once
#ifndef INCLUDED_PartialHandlerBase_h_GUID_314b3576_c339_42e9_ac75_cccb9b7f0bfe
#define INCLUDED_PartialHandlerBase_h_GUID_314b3576_c339_42e9_ac75_cccb9b7f0bfe

// Internal Includes
#include "Receiver.h"

// Library/third-party includes
// - none

// Standard includes
// - none

namespace transmission {

	/** @brief Base class for use in creating functors for transmission::Receiver
		that provides default handlers for all message types.

		If you derive your functor from this class, you don't have to provide all
		the handlers, and you must include a line like the following in the
		functor to explicitly use the provided defaults:

		using transmission::PartialHandlerBase::operator();
	*/
	class PartialHandlerBase  {
		public:

			template<typename M>
			void operator()(M const &, typename M::message_type_tag * = NULL) {}

			template<typename M, typename T1>
			void operator()(M const &, T1, typename M::message_type_tag * = NULL) {}

			template<typename M, typename T1, typename T2>
			void operator()(M const &, T1, T2, typename M::message_type_tag * = NULL) {}

			template<typename M, typename T1, typename T2, typename T3>
			void operator()(M const &, T1, T2, T3, typename M::message_type_tag * = NULL) {}

			template<typename M, typename T1, typename T2, typename T3, typename T4>
			void operator()(M const &, T1, T2, T3, T4, typename M::message_type_tag * = NULL) {}

			template<typename M, typename T1, typename T2, typename T3, typename T4, typename T5>
			void operator()(M const &, T1, T2, T3, T4, T5, typename M::message_type_tag * = NULL) {}

			template<typename M, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>
			void operator()(M const &, T1, T2, T3, T4, T5, T6, typename M::message_type_tag * = NULL) {}

			template<typename M, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
			void operator()(M const &, T1, T2, T3, T4, T5, T6, T7, typename M::message_type_tag * = NULL) {}

			template<typename M, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
			void operator()(M const &, T1, T2, T3, T4, T5, T6, T7, T8, typename M::message_type_tag * = NULL) {}

			template<typename M, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
			void operator()(M const &, T1, T2, T3, T4, T5, T6, T7, T8, T9, typename M::message_type_tag * = NULL) {}

	};
} // end of namespace transmission

#endif // INCLUDED_PartialHandlerBase_h_GUID_314b3576_c339_42e9_ac75_cccb9b7f0bfe

