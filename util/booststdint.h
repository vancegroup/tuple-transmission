/*
	@brief Header - AUTO-GENERATED BY generate_booststdint.lua

	Annoyed how boost/cstdint.hpp almost does everything you want, except
	it puts the types directly in the boost namespace so you can't do an
	easy "using namespace" line to import just the standard integers?

	Well, this header makes such a namespace: stdint.  All the tedious
	work is done for you (by the script that generated this file).

	@date 2012

	@author
	Ryan Pavlik
	<rpavlik@iastate.edu> and <abiryan@ryand.net>
	http://academic.cleardefinition.com/
	Iowa State University Virtual Reality Applications Center
	Human-Computer Interaction Graduate Program
*/

//          Copyright Iowa State University 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#pragma once
#ifndef INCLUDED_booststdint_h_GUID_96d717cd_827b_4889_8505_6a9102af0dae
#define INCLUDED_booststdint_h_GUID_96d717cd_827b_4889_8505_6a9102af0dae

// Internal Includes
// - none

// Library/third-party includes
#include <boost/cstdint.hpp>


// Standard includes
// - none

namespace stdint {

	using boost::int8_t;
	using boost::int_least8_t;
	using boost::int_fast8_t;
	using boost::uint8_t;
	using boost::uint_least8_t;
	using boost::uint_fast8_t;
	using boost::int16_t;
	using boost::int_least16_t;
	using boost::int_fast16_t;
	using boost::uint16_t;
	using boost::uint_least16_t;
	using boost::uint_fast16_t;
	using boost::int32_t;
	using boost::int_least32_t;
	using boost::int_fast32_t;
	using boost::uint32_t;
	using boost::uint_least32_t;
	using boost::uint_fast32_t;

#ifndef BOOST_NO_INT64_T
	using boost::int64_t;
	using boost::int_least64_t;
	using boost::int_fast64_t;
	using boost::uint64_t;
	using boost::uint_least64_t;
	using boost::uint_fast64_t;
#endif // ifndef BOOST_NO_INT64_T

	using boost::intmax_t;
	using boost::uintmax_t;

} // end of namespace stdint

#endif // INCLUDED_booststdint_h_GUID_96d717cd_827b_4889_8505_6a9102af0dae

