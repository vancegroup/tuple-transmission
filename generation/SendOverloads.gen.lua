return {
	outFile = "detail/operations/SendOverloads_Generated.h";
	baseIndent = 4;
	minArity = SendOverloadMinArity;
	maxArity = SendOverloadMaxArity;
	generate = function(arity)
		out( "template<typename Collection, typename Message, typename TransmitterDerived>")
		out(("inline typename enable_if< mpl::equal_to<mpl::int_<%d>, typename mpl::size<Message>::type>, void>::type"):format(arity))

		local arguments = {"transmitters::TransmitterBase<TransmitterDerived> & tx"}
		if arity > 0 then
			table.insert(arguments, genRange(arity, function(i) return ("typename mpl::at_c<Message, %d>::type a%d"):format(i - 1, i) end))
		end
		out(("send(%s) {"):format(commaJoin(arguments)))

		out(1, "::transmission::send<Collection, Message>(")
		out(1, 1, "tx,")
		out(1, 1, "fusion::make_list(")
		if arity > 0 then
			out(1, 2, genRange(arity, function(i) return ("a%d"):format(i) end))
		end
		out(1, 1, ")")
		-- Finish the call and the function
		out(1, ");")
		out("}\n")
	end;

	prefix = [[
/** @file
	@brief Header AUTO-GENERATED by %s to avoid doing crazy preprocessor things

	DO NOT EDIT THIS FILE DIRECTLY - instead, edit the script that generates it.

        @date 2012

        @author
        Ryan Pavlik
        <rpavlik@iastate.edu> and <abiryan@ryand.net>
        http://academic.cleardefinition.com/
        Iowa State University Virtual Reality Applications Center
        Human-Computer Interaction Graduate Program
*/

//          Copyright Iowa State University 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#pragma once
#ifndef INCLUDED_SendOverloads_Generated_h_GUID_ceb4f589_526e_49d7_84c5_0b38f6d1fc42
#define INCLUDED_SendOverloads_Generated_h_GUID_ceb4f589_526e_49d7_84c5_0b38f6d1fc42

// Internal Includes
#include "../constants/ArityConfig.h"
#include "../bases/TransmitterBase_fwd.h"

// Library/third-party includes
#include <boost/fusion/include/make_list.hpp>
#include <boost/mpl/size.hpp>
#include <boost/mpl/int.hpp>
#include <boost/mpl/at.hpp>
#include <boost/mpl/equal_to.hpp>
#include <boost/utility/enable_if.hpp>

// Standard includes
// - none

namespace transmission {
	// Forward-declare the main send function that we'll invoke after making a fusion sequence
	template<typename Collection, typename Message, typename TransmitterDerived, typename MessageContentsType>
	void send(transmitters::TransmitterBase<TransmitterDerived> & tx, MessageContentsType const & contents);

	namespace detail {
		namespace operations {
			namespace generated {
				namespace mpl = boost::mpl;
				namespace fusion = boost::fusion;
				using boost::enable_if;
				typedef mpl::int_<]] .. tostring(SendOverloadMaxArity) .. [[> SendOverloadMaxArity;
]];

	suffix = [[
			} // end of namespace generated
		} // end of namespace operations
	} // end of namespace detail

	using detail::operations::generated::send;
} // end of namespace transmission
#endif // INCLUDED_SendOverloads_Generated_h_GUID_ceb4f589_526e_49d7_84c5_0b38f6d1fc42
]];
}
